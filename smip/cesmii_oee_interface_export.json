{
    "meta": {
        "file_version": "4.0.2",
        "database_name": "demo",
        "export_timestamp": "2024-05-14T13:40:56.166097+00:00",
        "export_library_fqn": [
            "oee_interface"
        ],
        "database_schema_version": "4.9.0"
    },
    "types": [
        {
            "fqn": [
                "oee_interface",
                "oee_availability_interface"
            ],
            "scripts": [
                {
                    "run": true,
                    "owner": "cesmiihq",
                    "script": "<?php\r\n/* Update Availability:\r\nThis script runs every minute against Equipment instances that implement the OEE Availability Interface \r\nto compute (and reset, when appropriate) the availability state of the Equipment, which is used in the OEE calculations.\r\n*/\r\nuse \\TiqUtilities\\Model\\Node;\r\nuse \\TiqUtilities\\Model\\Type;\r\nuse \\TiqUtilities\\Model\\Equipment;\r\nuse \\TiqUtilities\\Model\\Attribute;\r\nuse \\TiqUtilities\\Model\\Script;\r\nuse Joomla\\CMS\\Response\\JsonResponse; // Used for returning data to the client.\r\nrequire_once 'thinkiq_context.php';\r\nrequire_once 'load_cms.php';\r\n$context = new Context();\r\n$logger = $context->logger; // shorthand to keep this script clearer \r\n\r\n//Load helper classes\r\nif (!defined('JPATHBASE')) define('JPATHBASE', dirname(__DIR__));\r\nScript::includeScript('oee_interface.oee_common_functions');\r\n$OEECommon = new OEECommon($context, $logger);\r\n\r\n//Make time\r\n$current_time_with_millisecond = DateTime::createFromFormat('U.u', microtime(true))->format(DateTimeInterface::RFC3339_EXTENDED);\r\necho \"Server Time: \" . $current_time_with_millisecond . PHP_EOL;\r\n\r\n//Find parent and get attributes\r\n$parent = new Node($context->std_inputs->node_id);\r\n$parent->getAttributes();\r\n$attribs = $parent->attributes;\r\n\r\n//Determine config\r\n$config = $OEECommon->getConfig($parent);\r\n\r\n//Figure out working day in configured timezone\r\n$offsetTime = $OEECommon->getOffsetTime($config);\r\necho \"Offset time: \" . $offsetTime->format( 'Y-m-d H:i:s' ) . PHP_EOL;\r\n\r\n//Reset the day if needed\r\n$minutesToday = $context->custom_inputs->minutestoday;\r\nif (!isset($minutesToday))\r\n    $minutesToday == 0;\r\necho \"Minutes today: \" . $minutesToday . PHP_EOL;\r\nif ($minutesToday >= 1440 || $offsetTime->format ('H:i') == $config[\"daystart\"]) {\r\n    echo \"Restarting the day!\" . PHP_EOL;\r\n    $attribs[\"productive_time_today\"]->int_value = 0;\r\n    $attribs[\"productive_time_today\"]->save();\r\n    $attribs[\"productive_time_today\"]->insertTimeSeries([0], [$current_time_with_millisecond]);\r\n\r\n    $attribs[\"daily_available_production_time\"]->int_value = 0;\r\n    $attribs[\"daily_available_production_time\"]->save();\r\n    $attribs[\"daily_available_production_time\"]->insertTimeSeries([0], [$current_time_with_millisecond]);\r\n\r\n    $attribs[\"faulted_time_today\"]->int_value = 0;\r\n    $attribs[\"faulted_time_today\"]->save();\r\n    $attribs[\"faulted_time_today\"]->insertTimeSeries([0], [$current_time_with_millisecond]);\r\n\r\n    $attribs[\"starved_time_today\"]->int_value = 0;\r\n    $attribs[\"starved_time_today\"]->save();\r\n    $attribs[\"starved_time_today\"]->insertTimeSeries([0], [$current_time_with_millisecond]);\r\n\r\n    $attribs[\"blocked_time_today\"]->int_value = 0;\r\n    $attribs[\"blocked_time_today\"]->save();\r\n    $attribs[\"blocked_time_today\"]->insertTimeSeries([0], [$current_time_with_millisecond]);\r\n\r\n    $output_data = array('minutestoday' => 0);\r\n} else {\r\n    echo \"It is not time to restart the day; \" . (1440 - $minutesToday) . \" minutes remaining...\" . PHP_EOL;\r\n    $output_data = array('minutestoday' => $minutesToday + 1);\r\n}\r\n\r\n//Get current values\r\n$planned = $attribs[\"daily_planned_production_time\"]->int_value;\r\nif (!isset($planned))\r\n    $planned = 0;\r\n$runtime = $attribs[\"productive_time_today\"]->int_value;\r\nif (!isset($runtime))\r\n    $runtime = 0;\r\necho \"Run time was: \" . $runtime . PHP_EOL;\r\n$running = $attribs[\"running\"]->bool_value;\r\nif (!isset($running))\r\n    $running = false;\r\necho \"Running is: \" . $running . PHP_EOL;\r\n\r\n//Increment Faulted time (if faulted)\r\n$faulted = $attribs[\"faulted\"]->bool_value;\r\nif (!isset($faulted))\r\n    $faulted = false;\r\necho \"Faulted is: \" . $faulted . PHP_EOL;\r\nif ($faulted) {\r\n    $faultedTime = $attribs[\"faulted_time_today\"]->int_value;\r\n    if (!isset($faultedTime))\r\n        $faultedTime = 0;\r\n    $faultedTime++;\r\n    echo \"Incrementing faulted time to: \" . $faultedTime . PHP_EOL;\r\n    $attribs[\"faulted_time_today\"]->int_value = $faultedTime;\r\n    $attribs[\"faulted_time_today\"]->save();\r\n    $attribs[\"faulted_time_today\"]->insertTimeSeries([$faultedTime], [$current_time_with_millisecond]);\r\n}\r\n//Increment Starved time (if starved)\r\n$starved = $attribs[\"starved\"]->bool_value;\r\nif (!isset($starved))\r\n    $starved = false;\r\necho \"Starved is: \" . $starved . PHP_EOL;\r\nif ($starved) {\r\n    $starvedTime = $attribs[\"starved_time_today\"]->int_value;\r\n    if (!isset($starvedTime))\r\n        $starvedTime = 0;\r\n    $starvedTime++;\r\n    echo \"Incrementing starved time to: \" . $starvedTime . PHP_EOL;\r\n    $attribs[\"starved_time_today\"]->int_value = $starvedTime;\r\n    $attribs[\"starved_time_today\"]->save();\r\n    $attribs[\"starved_time_today\"]->insertTimeSeries([$starvedTime], [$current_time_with_millisecond]);\r\n}\r\n//Increment Blocked time (if blocked)\r\n$blocked = $attribs[\"blocked\"]->bool_value;\r\nif (!isset($blocked))\r\n    $blocked = false;\r\necho \"Blocked is: \" . $blocked . PHP_EOL;\r\nif ($blocked) {\r\n    $blockedTime = $attribs[\"blocked_time_today\"]->int_value;\r\n    if (!isset($blockedTime))\r\n        $blockedTime = 0;\r\n    $blockedTime++;\r\n    echo \"Incrementing blocked time to: \" . $blockedTime . PHP_EOL;\r\n    $attribs[\"blocked_time_today\"]->int_value = $blockedTime;\r\n    $attribs[\"blocked_time_today\"]->save();\r\n    $attribs[\"blocked_time_today\"]->insertTimeSeries([$blockedTime], [$current_time_with_millisecond]);\r\n}\r\n//Increment running time if everything looks good\r\nif ($running && !$faulted && !$starved && !$blocked) {\r\n    echo \"It looks like we're running, adding a minute...\" . PHP_EOL;\r\n    $runtime = $runtime + 1;\r\n    $attribs[\"productive_time_today\"]->int_value = $runtime;\r\n    $attribs[\"productive_time_today\"]->save();\r\n    $attribs[\"productive_time_today\"]->insertTimeSeries([(int)$runtime], [$current_time_with_millisecond]);\r\n\r\n    if ($minutesToday < $runtime) {\r\n        $minutesToday = $runtime;\r\n    }\r\n}\r\n//Increment actual production time every minute until plan\r\nif ((int)$minutesToday <= $planned) {\r\n    $attribs[\"daily_available_production_time\"]->int_value = (int)$minutesToday;\r\n    $attribs[\"daily_available_production_time\"]->save();\r\n    $attribs[\"daily_available_production_time\"]->insertTimeSeries([(int)$minutesToday], [$current_time_with_millisecond]);\r\n}\r\n\r\necho \"Run Time is: \" . $runtime . PHP_EOL; \r\n$context->return_data($output_data);",
                    "document": {
                        "template": false
                    },
                    "importance": null,
                    "description": "This script runs every minute against Equipment instances that implement the OEE Availability Interface, to compute the availability state of the Equipment, which is used in the OEE calculations.",
                    "edit_status": 1,
                    "output_type": "headless",
                    "script_type": "php",
                    "display_name": "Update Availability",
                    "relative_name": "update_availability",
                    "initial_inputs": {
                        "start_timestamp": "2024-04-18T18:56:48.000+00:00",
                        "interval_seconds": "60"
                    },
                    "cron_expression": "0 * * * * ? *",
                    "exec_on_derived": false,
                    "updated_timestamp": "2024-05-14T13:08:14.010446+00:00",
                    "max_acceptable_run_secs": 58,
                    "use_outputs_from_last_run": true
                }
            ],
            "document": null,
            "attributes": [
                {
                    "icon": null,
                    "document": null,
                    "data_type": "bool",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 50,
                    "description": "Bind this value to a machine data point (Optional).",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "In Auto",
                    "default_value": null,
                    "relative_name": "in_auto",
                    "decimal_places": 2,
                    "source_category": "dynamic",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-14T13:02:08.79896+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": true,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 100,
                    "description": "Accumulates throughout the day, calculated automatically. Resets each day.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Starved Time Today",
                    "default_value": null,
                    "relative_name": "starved_time_today",
                    "decimal_places": 2,
                    "source_category": "dynamic",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-14T12:57:34.106186+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": [
                        "thinkiq_base_library",
                        "minute"
                    ]
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "float",
                    "is_hidden": false,
                    "max_value": 100,
                    "min_value": 0,
                    "expression": "($.productive_time_today / $.daily_available_production_time) * 100",
                    "importance": 1,
                    "description": "Calculated automatically throughout the day. Resets each day.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Daily Availability",
                    "default_value": null,
                    "relative_name": "daily_availability",
                    "decimal_places": 2,
                    "source_category": "expression",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-07T22:37:44.232116+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "linear",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": [
                        "thinkiq_base_library",
                        "percent"
                    ]
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": 1440,
                    "min_value": 0,
                    "expression": null,
                    "importance": 5,
                    "description": "Configure this value.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Daily Planned Production Time",
                    "default_value": null,
                    "relative_name": "daily_planned_production_time",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-14T12:58:01.626304+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": [
                        "thinkiq_base_library",
                        "minute"
                    ]
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "bool",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 20,
                    "description": "Bind this value to a machine data point. Indicates commanded state, not actual state.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Running",
                    "default_value": null,
                    "relative_name": "running",
                    "decimal_places": 2,
                    "source_category": "dynamic",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-14T12:55:58.794295+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": 1440,
                    "min_value": 0,
                    "expression": null,
                    "importance": 80,
                    "description": "Actual productive time. Accumulates throughout the day, calculated automatically. Resets each day.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Productive Time Today",
                    "default_value": null,
                    "relative_name": "productive_time_today",
                    "decimal_places": 2,
                    "source_category": "dynamic",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-14T12:59:31.398565+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "linear",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": [
                        "thinkiq_base_library",
                        "minute"
                    ]
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "bool",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 60,
                    "description": "Bind this value to a machine data point (Optional).",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Starved",
                    "default_value": null,
                    "relative_name": "starved",
                    "decimal_places": 2,
                    "source_category": "dynamic",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-14T12:56:29.546155+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "bool",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 70,
                    "description": "Bind this value to a machine data point (Optional).",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Blocked",
                    "default_value": null,
                    "relative_name": "blocked",
                    "decimal_places": 2,
                    "source_category": "dynamic",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-14T12:56:34.54424+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 90,
                    "description": "Accumulates throughout the day, calculated automatically. Resets each day.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Faulted Time Today",
                    "default_value": null,
                    "relative_name": "faulted_time_today",
                    "decimal_places": 2,
                    "source_category": "dynamic",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-14T12:56:56.151947+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": [
                        "thinkiq_base_library",
                        "minute"
                    ]
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "bool",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 30,
                    "description": "Bind this value to a machine data point.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Faulted",
                    "default_value": null,
                    "relative_name": "faulted",
                    "decimal_places": 2,
                    "source_category": "dynamic",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-14T12:56:04.684085+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 40,
                    "description": "Bind this value to a machine data point (Optional).",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Last Fault Code",
                    "default_value": null,
                    "relative_name": "last_fault_code",
                    "decimal_places": 2,
                    "source_category": "dynamic",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-14T12:56:17.384517+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 110,
                    "description": "Accumulates throughout the day, calculated automatically. Resets each day.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Blocked Time Today",
                    "default_value": null,
                    "relative_name": "blocked_time_today",
                    "decimal_places": 2,
                    "source_category": "dynamic",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-14T12:57:07.663593+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 120,
                    "description": "Accumulates throughout the day until Planned Production Time to ensure the OEE calculation is fair. Resets each day.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Daily Available Production Time",
                    "default_value": null,
                    "relative_name": "daily_available_production_time",
                    "decimal_places": 2,
                    "source_category": "dynamic",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-14T12:58:29.999478+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": [
                        "thinkiq_base_library",
                        "minute"
                    ]
                }
            ],
            "importance": null,
            "description": null,
            "edit_status": 1,
            "display_name": "OEEAvailabilityInterfaceType",
            "opcua_methods": [],
            "relative_name": "oee_availability_interface",
            "classification": "equipment",
            "child_equipment": [],
            "sub_type_of_fqn": [
                "thinkiq_base_library",
                "equipment"
            ],
            "access_group_ids": null,
            "updated_timestamp": "2024-04-28T18:26:36.560587+00:00",
            "unlink_relative_name": true
        },
        {
            "fqn": [
                "oee_interface",
                "oee_performance_interface"
            ],
            "scripts": [
                {
                    "run": true,
                    "owner": "cesmiihq",
                    "script": "<?php\r\n /* Update Performance:\r\nThis script runs every minute against Equipment instances that implement the OEE Performance Interface \r\nto compute (and reset, when appropriate) the performance state of the Equipment, which is used in the OEE calculations.\r\n*/\r\nuse \\TiqUtilities\\Model\\Node;\r\nuse \\TiqUtilities\\Model\\Type;\r\nuse \\TiqUtilities\\Model\\Equipment;\r\nuse \\TiqUtilities\\Model\\Attribute;\r\nuse \\TiqUtilities\\Model\\Script;\r\nuse Joomla\\CMS\\Response\\JsonResponse; // Used for returning data to the client.\r\nrequire_once 'thinkiq_context.php';\r\nrequire_once 'load_cms.php';\r\n$context = new Context();\r\n$logger = $context->logger; // shorthand to keep this script clearer \r\n\r\n//Load helper classes\r\nif (!defined('JPATHBASE')) define('JPATHBASE', dirname(__DIR__));\r\nScript::includeScript('oee_interface.oee_common_functions');\r\n$OEECommon = new OEECommon($context, $logger);\r\n\r\n//Make time\r\n$current_time_with_millisecond = DateTime::createFromFormat('U.u', microtime(true))->format(DateTimeInterface::RFC3339_EXTENDED);\r\necho \"Server Time: \" . $current_time_with_millisecond . PHP_EOL;\r\n\r\n//Find parent and get attributes\r\n$parent = new Node($context->std_inputs->node_id);\r\n$parent->getAttributes();\r\n$attribs = $parent->attributes;\r\n\r\n//Determine config\r\n$config = $OEECommon->getConfig($parent);\r\n\r\n//Figure out working day in configured timezone\r\n$offsetTime = $OEECommon->getOffsetTime($config);\r\necho \"Offset time: \" . $offsetTime->format( 'Y-m-d H:i:s' ) . PHP_EOL;\r\n\r\n//Reset the day if needed\r\n$minutesToday = $context->custom_inputs->minutestoday;\r\nif (!isset($minutesToday))\r\n    $minutesToday == 0;\r\necho \"Minutes today: \" . $minutesToday . PHP_EOL;\r\nif ($minutesToday >= 1440 || $offsetTime->format ('H:i') == $config[\"daystart\"]) {\r\n    echo \"Restarting the day!\" . PHP_EOL;\r\n\r\n    $attribs[\"daily_operating_time\"]->float_value = 0;\r\n    $attribs[\"daily_operating_time\"]->save();\r\n    $attribs[\"daily_operating_time\"]->insertTimeSeries([0], [$current_time_with_millisecond]);\r\n\r\n    $attribs[\"daily_actual_cycles\"]->int_value = 0;\r\n    $attribs[\"daily_actual_cycles\"]->save();\r\n    $attribs[\"daily_actual_cycles\"]->insertTimeSeries([0], [$current_time_with_millisecond]);\r\n\r\n    $output_data = array('minutestoday' => 0);\r\n} else {\r\n    echo \"It is not time to restart the day; \" . (1440 - $minutesToday) . \" minutes remaining...\" . PHP_EOL;\r\n    $output_data = array('minutestoday' => $minutesToday + 1);\r\n}\r\n\r\n//Get current values\r\n$operating = -1;\r\n//Get more accurate run time from Availability peer, if present\r\n$availabilityType = new Type('oee_interface.oee_availability_interface');\r\n$availabilityInstance = $OEECommon->findRelatedNodeOfType($parent, 'oee_interface.oee_availability_interface');\r\nif (isset($availabilityInstance)) {\r\n    $availabilityInstance->getAttributes();\r\n    $availAttrib = $availabilityInstance->attributes;\r\n    $operating = $availAttrib[\"productive_time_today\"]->current_value;\r\n    echo \"Using Availability run time: \" . $operating . PHP_EOL;\r\n}\r\nif ($operating <= 0) {\r\n    //Otherwise, we'll consider all minutes in the day as operating time\r\n    $operating = $attribs[\"daily_operating_time\"]->current_value;\r\n    echo \"Using All Day run time: \" . $operating . PHP_EOL;\r\n}\r\n$attribs[\"daily_operating_time\"]->float_value = (float)$operating + 1;\r\n$attribs[\"daily_operating_time\"]->save();\r\n$attribs[\"daily_operating_time\"]->insertTimeSeries([(float)$operating + 1], [$current_time_with_millisecond]);\r\n\r\n$context->return_data($output_data);",
                    "document": {
                        "template": false
                    },
                    "importance": null,
                    "description": "This script runs every minute against Equipment instances that implement the OEE Performance Interface, to compute the performance state of the Equipment, which is used in the OEE calculations.",
                    "edit_status": 1,
                    "output_type": "headless",
                    "script_type": "php",
                    "display_name": "Update Performance",
                    "relative_name": "update_performance",
                    "initial_inputs": {
                        "start_timestamp": "2024-04-28T18:22:18.000+00:00",
                        "interval_seconds": "60"
                    },
                    "cron_expression": "0 * * * * ? *",
                    "exec_on_derived": false,
                    "updated_timestamp": "2024-05-14T13:08:49.219876+00:00",
                    "max_acceptable_run_secs": 58,
                    "use_outputs_from_last_run": true
                }
            ],
            "document": null,
            "attributes": [
                {
                    "icon": null,
                    "document": null,
                    "data_type": "float",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 20,
                    "description": "Configure this value.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Ideal Cycle Time",
                    "default_value": null,
                    "relative_name": "ideal_cycle_time",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-07T14:32:23.57408+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": [
                        "thinkiq_base_library",
                        "minute"
                    ]
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "int",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 40,
                    "description": "Bind this value to a machine data point.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Daily Actual Cycles",
                    "default_value": null,
                    "relative_name": "daily_actual_cycles",
                    "decimal_places": 2,
                    "source_category": "dynamic",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-07T14:32:42.120102+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "linear",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "float",
                    "is_hidden": false,
                    "max_value": 100,
                    "min_value": 0,
                    "expression": "(($.daily_actual_cycles * $.ideal_cycle_time) / $.daily_operating_time) * 100",
                    "importance": 10,
                    "description": "Calculated automatically throughout the day. Resets each day.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Daily Performance",
                    "default_value": null,
                    "relative_name": "daily_performance",
                    "decimal_places": 2,
                    "source_category": "expression",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-07T22:43:53.121836+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "linear",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": [
                        "thinkiq_base_library",
                        "percent"
                    ]
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "float",
                    "is_hidden": false,
                    "max_value": 1440,
                    "min_value": 0,
                    "expression": null,
                    "importance": 100,
                    "description": "Actual operating time. Accumulates throughout the day, calculated automatically. Resets each day.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Daily Operating Time",
                    "default_value": null,
                    "relative_name": "daily_operating_time",
                    "decimal_places": 2,
                    "source_category": "dynamic",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-14T12:59:45.30604+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "linear",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": [
                        "thinkiq_base_library",
                        "minute"
                    ]
                }
            ],
            "importance": null,
            "description": null,
            "edit_status": 1,
            "display_name": "OEEPerformanceInterfaceType",
            "opcua_methods": [],
            "relative_name": "oee_performance_interface",
            "classification": "equipment",
            "child_equipment": [],
            "sub_type_of_fqn": [
                "thinkiq_base_library",
                "equipment"
            ],
            "access_group_ids": null,
            "updated_timestamp": "2024-04-28T18:26:19.964154+00:00",
            "unlink_relative_name": true
        },
        {
            "fqn": [
                "oee_interface",
                "oee_quality_interface"
            ],
            "scripts": [
                {
                    "run": true,
                    "owner": "cesmiihq",
                    "script": "<?php\r\n/* Update Quality:\r\nThis script runs every minute against Equipment instances that implement the OEE Quality Interface\r\nto reset the quality counters of the Equipment, which is used in the OEE calculations.\r\n*/\r\nuse \\TiqUtilities\\Model\\Node;\r\nuse \\TiqUtilities\\Model\\Type;\r\nuse \\TiqUtilities\\Model\\Equipment;\r\nuse \\TiqUtilities\\Model\\Attribute;\r\nuse \\TiqUtilities\\Model\\Script;\r\nuse Joomla\\CMS\\Response\\JsonResponse; // Used for returning data to the client.\r\nrequire_once 'thinkiq_context.php';\r\nrequire_once 'load_cms.php';\r\n$context = new Context();\r\n$logger = $context->logger; // shorthand to keep this script clearer \r\n\r\n//Load helper classes\r\nif (!defined('JPATHBASE')) define('JPATHBASE', dirname(__DIR__));\r\nScript::includeScript('oee_interface.oee_common_functions');\r\n$OEECommon = new OEECommon($context, $logger);\r\n\r\n//Make time\r\n$current_time_with_millisecond = DateTime::createFromFormat('U.u', microtime(true))->format(DateTimeInterface::RFC3339_EXTENDED);\r\necho \"Server Time: \" . $current_time_with_millisecond . PHP_EOL;\r\n\r\n//Find parent and get attributes\r\n$parent = new Node($context->std_inputs->node_id);\r\n$parent->getAttributes();\r\n$attribs = $parent->attributes;\r\n\r\n//Determine config\r\n$config = $OEECommon->getConfig($parent);\r\n\r\n//Figure out working day in configured timezone\r\n$offsetTime = $OEECommon->getOffsetTime($config);\r\necho \"Offset time: \" . $offsetTime->format( 'Y-m-d H:i:s' ) . PHP_EOL;\r\n\r\n//Reset the day if needed\r\n$minutesToday = $context->custom_inputs->minutestoday;\r\nif (!isset($minutesToday))\r\n    $minutesToday == 0;\r\necho \"Minutes today: \" . $minutesToday . PHP_EOL;\r\nif ($minutesToday >= 1440 || $offsetTime->format ('H:i') == $config[\"daystart\"]) {\r\n    echo \"Restarting the day!\" . PHP_EOL;\r\n\r\n    $attribs[\"daily_good_product\"]->float_value = 0;\r\n    $attribs[\"daily_good_product\"]->save();\r\n    $attribs[\"daily_good_product\"]->insertTimeSeries([0], [$current_time_with_millisecond]);\r\n\r\n    //If daily_total_product is set to be calculated, it can't be set, otherwise, set it\r\n    if ($attribs[\"daily_total_product\"]->data_source !== \"expression\") {\r\n        $attribs[\"daily_total_product\"]->float_value = 0;\r\n        $attribs[\"daily_total_product\"]->save();\r\n        $attribs[\"daily_total_product\"]->insertTimeSeries([0], [$current_time_with_millisecond]);\r\n    }\r\n\r\n    $attribs[\"daily_bad_product\"]->float_value = 0;\r\n    $attribs[\"daily_bad_product\"]->save();\r\n    $attribs[\"daily_bad_product\"]->insertTimeSeries([0], [$current_time_with_millisecond]);\r\n\r\n    $output_data = array('minutestoday' => 0);\r\n} else {\r\n    echo \"It is not time to restart the day; \" . (1440 - $minutesToday) . \" minutes remaining...\" . PHP_EOL;\r\n    $output_data = array('minutestoday' => $minutesToday + 1);\r\n}\r\n$context->return_data($output_data);",
                    "document": {
                        "template": false
                    },
                    "importance": null,
                    "description": "This script runs every minute against Equipment instances that implement the OEE Quality Interface, to sync day time start with other OEE Interfaces.",
                    "edit_status": 1,
                    "output_type": "headless",
                    "script_type": "php",
                    "display_name": "Update Quality",
                    "relative_name": "update_quality",
                    "initial_inputs": {
                        "start_timestamp": "2024-04-28T20:16:54.000+00:00",
                        "interval_seconds": "60"
                    },
                    "cron_expression": "0 * * * * ? *",
                    "exec_on_derived": false,
                    "updated_timestamp": "2024-05-14T13:23:51.683764+00:00",
                    "max_acceptable_run_secs": 58,
                    "use_outputs_from_last_run": true
                }
            ],
            "document": null,
            "attributes": [
                {
                    "icon": null,
                    "document": null,
                    "data_type": "float",
                    "is_hidden": false,
                    "max_value": 100,
                    "min_value": 0,
                    "expression": "($.daily_good_product / $.daily_total_product) * 100",
                    "importance": 1,
                    "description": "Calculated automatically throughout the day. Resets each day.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Daily Quality",
                    "default_value": null,
                    "relative_name": "daily_quality",
                    "decimal_places": 2,
                    "source_category": "expression",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-07T13:31:16.561545+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "linear",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": [
                        "thinkiq_base_library",
                        "percent"
                    ]
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "float",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 10,
                    "description": "Bind this value to a machine data point.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Daily Good Product",
                    "default_value": null,
                    "relative_name": "daily_good_product",
                    "decimal_places": 2,
                    "source_category": "dynamic",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-07T13:31:40.264057+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "linear",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "float",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 10,
                    "description": "Bind this value to a machine data point.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Daily Bad Product",
                    "default_value": null,
                    "relative_name": "daily_bad_product",
                    "decimal_places": 2,
                    "source_category": "dynamic",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-07T13:32:24.731143+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "linear",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "float",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": "$.daily_good_product + $.daily_bad_product",
                    "importance": 100,
                    "description": "Calculated by default. Alternatively, bind this value to a machine data point.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Daily Total Product",
                    "default_value": null,
                    "relative_name": "daily_total_product",
                    "decimal_places": 2,
                    "source_category": "expression",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-07T13:34:38.379388+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "linear",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                }
            ],
            "importance": null,
            "description": null,
            "edit_status": 1,
            "display_name": "OEEQualityInterfaceType",
            "opcua_methods": [],
            "relative_name": "oee_quality_interface",
            "classification": "equipment",
            "child_equipment": [],
            "sub_type_of_fqn": [
                "thinkiq_base_library",
                "equipment"
            ],
            "access_group_ids": null,
            "updated_timestamp": "2024-04-28T18:25:33.137153+00:00",
            "unlink_relative_name": true
        },
        {
            "fqn": [
                "oee_interface",
                "oee_summary_interface"
            ],
            "scripts": [
                {
                    "run": true,
                    "owner": "cesmiihq",
                    "script": "<?php\r\n /* Update Summary:\r\nThis script runs every minute against Equipment instances that implement the OEE Summary Interface\r\nto compute (and reset, when appropriate) the summary OEE state of the Equipment.\r\n*/\r\nuse \\TiqUtilities\\Model\\Node;\r\nuse \\TiqUtilities\\Model\\Type;\r\nuse \\TiqUtilities\\Model\\Equipment;\r\nuse \\TiqUtilities\\Model\\Attribute;\r\nuse \\TiqUtilities\\Model\\Script;\r\nuse Joomla\\CMS\\Response\\JsonResponse; // Used for returning data to the client.\r\nrequire_once 'thinkiq_context.php';\r\nrequire_once 'load_cms.php';\r\n$context = new Context();\r\n\r\n//Find our types\r\n$availabilityType = new Type('oee_interface.oee_availability_interface');\r\n$qualityType = new Type('oee_interface.oee_quality_interface');\r\n$performanceType = new Type('oee_interface.oee_performance_interface');\r\n$summaryType = new Type('oee_interface.oee_summary_interface');\r\n\r\n//Make a usable timestamp\r\n$current_time_with_millisecond = DateTime::createFromFormat('U.u', microtime(true))->format(DateTimeInterface::RFC3339_EXTENDED);\r\necho \"Using Time: \" . $current_time_with_millisecond . PHP_EOL;\r\n\r\n//Find parent and get children\r\n$parent = new Node($context->std_inputs->node_id);\r\n$parent->getChildren();\r\n$grandparent = Node::getInstance($parent->part_of_id);\r\necho \"Part of: \" . $grandparent->relative_name . PHP_EOL;\r\n$childNodes = $parent->children;\r\n\r\n//If there are no children, get the grandparent's children\r\nif (count($childNodes) <= 0) {\r\n    $grandparent->getChildren();\r\n    $childNodes = $grandparent->children;\r\n}\r\n\r\nif (isset($parent)) {\r\n    if ($parent->type_id == $summaryType->id) {\r\n        $parent->getAttributes();\r\n        if (isset($parent->attributes[\"oee_percent\"]->current_value))\r\n            $oeeValue = $parent->attributes[\"oee_percent\"]->current_value;\r\n        else\r\n            echo \"Warning: could not find today's OEE value!\" . PHP_EOL;\r\n    } else {\r\n        die (\"Parent object was not an OEE Summary Instance, this script cannot run!\");\r\n    }\r\n} else {\r\n    die (\"Error: could not find OEE Summary Instance, nothing to update!\");\r\n}\r\n\r\n$found = 0;\r\nforeach($childNodes as $aChild){\r\n    if ($aChild->type_id == $availabilityType->id) {\r\n        echo \"Found the availablity child!\" . PHP_EOL;\r\n        $availabilityInstance = $aChild;\r\n        $found++;\r\n    }\r\n    if ($aChild->type_id == $qualityType->id) {\r\n        echo \"Found the quality child!\" . PHP_EOL;\r\n        $qualityInstance = $aChild;\r\n        $found++;\r\n    }\r\n    if ($aChild->type_id == $performanceType->id) {\r\n        echo \"Found the performance child!\" . PHP_EOL;\r\n        $performanceInstance = $aChild;\r\n        $found++;\r\n    }\r\n}\r\n\r\n$availabilityValue = 100;\r\nif (isset($availabilityInstance)) {\r\n    $availabilityInstance->getAttributes();\r\n    if (isset($availabilityInstance->attributes[\"daily_availability\"]->current_value)) {\r\n        $availabilityValue = $availabilityInstance->attributes[\"daily_availability\"]->current_value;\r\n    }\r\n    else {\r\n        echo \"Warning: could not find today's availability value!\" . PHP_EOL;\r\n    }   \r\n} else {\r\n    echo \"Warning: could not find availability instance!\" . PHP_EOL;\r\n}\r\n\r\n$performanceValue = 100;\r\nif (isset ($performanceInstance)) {\r\n    $performanceInstance->getAttributes();\r\n    if (isset($performanceInstance->attributes[\"daily_performance\"]->current_value)) {\r\n        $performanceValue = $performanceInstance->attributes[\"daily_performance\"]->current_value;\r\n    } else {\r\n        echo \"Warning: could not find today's performance value!\" . PHP_EOL;\r\n    }   \r\n\r\n} else {\r\n    echo \"Warning: could not find performance instance!\" . PHP_EOL;\r\n}\r\n\r\n$qualityValue = 100;\r\nif (isset ($qualityInstance)) {\r\n    $qualityInstance->getAttributes();\r\n    if (isset($qualityInstance->attributes[\"daily_quality\"]->current_value)) {\r\n        $qualityValue = $qualityInstance->attributes[\"daily_quality\"]->current_value;\r\n    } else {\r\n        echo \"Warning: could not find today's quality value!\" . PHP_EOL;\r\n    }\r\n} else {\r\n    echo \"Warning: could not find quality instance!\" . PHP_EOL;\r\n}\r\n\r\necho \"Availability Current Value: \" . $availabilityValue . PHP_EOL;\r\necho \"Performance Current Value: \" . $performanceValue . PHP_EOL;\r\necho \"Quality Current Value: \" . $qualityValue . PHP_EOL;\r\necho \"OEE Current Value: \" . $oeeValue . PHP_EOL;\r\n\r\n$oeeValue = ($availabilityValue / 100) * ($performanceValue / 100) * ($qualityValue / 100);\r\n$oeeValue = $oeeValue * 100;\r\necho \"New OEE Value: \" . $oeeValue . PHP_EOL;\r\n\r\n$parent->attributes[\"oee_percent\"]->floatValue = $oeeValue;\r\n$parent->attributes[\"oee_percent\"]->save();\r\n$parent->attributes[\"oee_percent\"]->insertTimeSeries([$oeeValue], [$current_time_with_millisecond]);\r\n\r\necho \"OEE Current Value Now: \" . $oeeValue . PHP_EOL;",
                    "document": {
                        "template": false
                    },
                    "importance": null,
                    "description": "This script runs every minute against Equipment instances that implement the OEE Summary Interface, to compute the OEE value.",
                    "edit_status": 1,
                    "output_type": "headless",
                    "script_type": "php",
                    "display_name": "Update Summary",
                    "relative_name": "update_summary",
                    "initial_inputs": {
                        "start_timestamp": "2024-04-28T20:01:49.000+00:00",
                        "interval_seconds": "60"
                    },
                    "cron_expression": "0 * * * * ? *",
                    "exec_on_derived": false,
                    "updated_timestamp": "2024-05-14T13:25:33.795947+00:00",
                    "max_acceptable_run_secs": 0,
                    "use_outputs_from_last_run": false
                },
                {
                    "run": true,
                    "owner": "cesmiihq",
                    "script": "<?php\r\n /* OEE Simulator:\r\nSchedule this script to run and it will produce OEE values on peer or child OEE interface implemenations to simulate OEE.\r\n*/\r\nuse \\TiqUtilities\\Model\\Node;\r\nuse \\TiqUtilities\\Model\\Type;\r\nuse \\TiqUtilities\\Model\\Equipment;\r\nuse \\TiqUtilities\\Model\\Attribute;\r\nuse \\TiqUtilities\\Model\\Script;\r\nuse Joomla\\CMS\\Response\\JsonResponse; // Used for returning data to the client.\r\nrequire_once 'thinkiq_context.php';\r\nrequire_once 'load_cms.php';\r\n$context = new Context();\r\n\r\n//Try to get last cycle time from previous run\r\ntry {\r\n    $lastCycleTicks = $context->custom_inputs->lastcycle;\r\n    $lastCycle = $lastCycleTicks;\r\n    echo \"last cycle was: \" . $lastCycle . PHP_EOL;\r\n    echo \"last cycle minutes ago: \" . minutesBetweenTicks($lastCycle, time()) . PHP_EOL;\r\n    $lastCycle = minutesBetweenTicks($lastCycle, time()) * 60;\r\n} catch (Exception $ex) {\r\n    $lastCycle = 0;\r\n    $lastCycleTicks = 0;\r\n}\r\necho \"last cycle seconds ago: \" . $lastCycle . PHP_EOL;\r\n\r\n//Setup default data for next run\r\n$output_data = [];\r\n$output_data['lastcycle'] = $lastCycleTicks;\r\n$output_data['lastrun'] = time();\r\n\r\n//Find our types\r\n$availabilityType = new Type('oee_interface.oee_availability_interface');\r\n$qualityType = new Type('oee_interface.oee_quality_interface');\r\n$performanceType = new Type('oee_interface.oee_performance_interface');\r\n$summaryType = new Type('oee_interface.oee_summary_interface');\r\n\r\n//Make usable time stamp\r\n$current_time_with_millisecond = DateTime::createFromFormat('U.u', microtime(true))->format(DateTimeInterface::RFC3339_EXTENDED);\r\necho \"Using Time: \" . $current_time_with_millisecond . PHP_EOL;\r\n\r\n//Find parent and get children\r\n$parent = new Node($context->std_inputs->node_id);\r\n$parent->getChildren();\r\n$grandparent = Node::getInstance($parent->part_of_id);\r\necho \"Part of: \" . $grandparent->relative_name . PHP_EOL;\r\n$childNodes = $parent->children;\r\n\r\n//If there are no children, get the grandparent's children\r\nif (count($childNodes) <= 0) {\r\n    $grandparent->getChildren();\r\n    $childNodes = $grandparent->children;\r\n}\r\n\r\n//Find the OEE interfaces\r\n$availabilityInstance = false;\r\n$qualityInstance = false;\r\n$performanceInstance = false;\r\n$summaryInstance = false;\r\n\r\nforeach($childNodes as $aChild){\r\n    if ($aChild->type_id == $availabilityType->id) {\r\n        echo \"Found the availablity child!\" . PHP_EOL;\r\n        $availabilityInstance = $aChild;\r\n    }\r\n    if ($aChild->type_id == $qualityType->id) {\r\n        echo \"Found the quality child!\" . PHP_EOL;\r\n        $qualityInstance = $aChild;\r\n    }\r\n    if ($aChild->type_id == $performanceType->id) {\r\n        echo \"Found the performance child!\" . PHP_EOL;\r\n        $performanceInstance = $aChild;\r\n    }\r\n    if ($aChild->type_id == $summaryType->id) {\r\n        echo \"Found the summary child!\" . PHP_EOL;\r\n        $summaryInstance = $aChild;\r\n    }\r\n}\r\n\r\n//Determine if the simulator is enabled\r\nif ($summaryInstance !== false) {\r\n    $summaryInstance->getAttributes();\r\n    if (isset($summaryInstance->attributes[\"simulator_enabled\"]->current_value) && $summaryInstance->attributes[\"simulator_enabled\"]->current_value == \"true\") {\r\n        echo \"Simulator enabled for this instance...\" . PHP_EOL;\r\n        echo $summaryInstance->attributes[\"simulator_enabled\"]->current_value . PHP_EOL;\r\n    } else {\r\n        echo(\"Simulator disabled for this instance. Stopping script...\");\r\n        $output_data['lastcycle']= time();\r\n        $context->return_data($output_data);\r\n        die();\r\n    }\r\n}\r\n\r\n//Set some defaults\r\n$cycleTime = 4.1;\r\n//If the performanceInstance is populated, try to use its configuration for the simulation\r\nif ($performanceInstance !== false) {\r\n    $performanceInstance->getAttributes();\r\n    $attribs = $performanceInstance->attributes;\r\n    if (isset($attribs) && isset($attribs[\"ideal_cycle_time\"]) && isset($attribs[\"ideal_cycle_time\"]->current_value)) {\r\n        $cycleTime = $attribs[\"ideal_cycle_time\"]->current_value;\r\n        echo \"Found a cycle time target in Performance Instance.\" . PHP_EOL;\r\n    }\r\n    if (isset($attribs) && isset($attribs[\"daily_operating_time\"]) && isset($attribs[\"daily_operating_time\"]->current_value)) {\r\n        $runTimeToday = $attribs[\"daily_operating_time\"]->current_value;\r\n        echo \"Found a run time for today in Performance Instance.\" . PHP_EOL;\r\n    }\r\n}\r\n$cycleTime = $cycleTime * 60;\r\necho \"Using target cycle time of: \" . $cycleTime . \" seconds\" . PHP_EOL;\r\n//Add a random number of seconds to target cycle time\r\n$cycleDelay = rand(20, 180) + $cycleTime;\r\necho \"Using actual cycle time of: \" . $cycleDelay . \" seconds\" . PHP_EOL;\r\n\r\n//Check if its time to compute a cycle\r\nif ($lastCycle >= $cycleDelay) {\r\n    echo \"Time to compute a cycle...\" . PHP_EOL;\r\n    if (!isset($runTimeToday) || (isset($runTimeToday) && $runTimeToday < $cycleDelay)) {\r\n        $output_data['lastcycle']= time();\r\n\r\n        //Update Quality Data\r\n        $availableNow = true;\r\n        if ($qualityInstance !== false) {\r\n            $availableNow = simulateQuality($qualityInstance, $current_time_with_millisecond);\r\n        } else {\r\n            echo \"- Quality Instance was not found, so its values could not be simulated!\" . PHP_EOL;\r\n        }\r\n        \r\n        //Update Performance Data\r\n        if ($performanceInstance !== false) {\r\n            simulatePerformance($performanceInstance, $availableNow, $current_time_with_millisecond);\r\n        } else {\r\n            echo \"- Performance Instance was not found, so its values could not be simulated!\" . PHP_EOL;\r\n        }\r\n    } else {\r\n        echo \"Skipping this cycle because today's runtime is not as long as the cycle time yet.\" . PHP_EOL;\r\n    }\r\n} else {\r\n    echo \"Its not time to compute a cycle yet! seconds left: \" . ($cycleDelay - $lastCycle) . PHP_EOL;\r\n    //BUT, we might want to set availability state mid-cycle, let's do it if the floor of the percent through the cycle is odd\r\n    $cyclePercent = floor((($cycleDelay - $lastCycle) / $cycleDelay) * 100);\r\n    echo \"Cycle Percent is: \" . $cyclePercent . PHP_EOL;\r\n    if ( ($cyclePercent & 1) && $cyclePercent > 10 && $cyclePercent < 90 ) {\r\n        echo \"But it is a good time to change the availability...\" . PHP_EOL;\r\n        //Update Availability Data\r\n        if ($availabilityInstance !== false) {\r\n            simulateAvailability($availabilityInstance, $current_time_with_millisecond);\r\n        } else {\r\n            echo \"- Availability Instance was not found, so its values could not be simulated!\" . PHP_EOL;\r\n        }\r\n    }\r\n}\r\n\r\n//Send some data to the next execution run\r\n$context->return_data($output_data);\r\n\r\n/* Helper Functions */\r\nfunction simulateQuality($qualityInstance, $current_time_with_millisecond) {\r\n    if (!$qualityInstance)\r\n        return false;\r\n\r\n    $qualityInstance->getAttributes();\r\n    //If this daily_total_product is set to be calculated, it can't be set, otherwise, set it\r\n    if ($qualityInstance->attributes[\"daily_total_product\"]->data_source !== \"expression\") {\r\n        $qualityInstance->attributes[\"daily_total_product\"]->insertTimeSeries([$qualityInstance->attributes[\"daily_total_product\"]->current_value + 1], [$current_time_with_millisecond]);\r\n    }\r\n    $goodOrBad = rand(0, 4);\r\n    if ($goodOrBad == 0) {\r\n        echo \"- This will be a bad cycle\" . PHP_EOL;\r\n        $qualityInstance->attributes[\"daily_bad_product\"]->insertTimeSeries([$qualityInstance->attributes[\"daily_bad_product\"]->current_value + 1], [$current_time_with_millisecond]);\r\n        return false;\r\n    } else {\r\n        echo \"- This will be a good cycle\" . PHP_EOL;\r\n        $qualityInstance->attributes[\"daily_good_product\"]->insertTimeSeries([$qualityInstance->attributes[\"daily_good_product\"]->current_value + 1], [$current_time_with_millisecond]);\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction simulateAvailability($availabilityInstance, $current_time_with_millisecond) {\r\n    if (!$availabilityInstance)\r\n        return false;\r\n\r\n    $availabilityInstance->getAttributes();\r\n    $machineState = rand(0, 15);\r\n    if ($machineState > 3 && $machineState <= 5) {\r\n        echo \"- The machine should be faulted\" . PHP_EOL;\r\n        $availabilityInstance->attributes[\"faulted\"]->bool_value = 1;\r\n        $availabilityInstance->attributes[\"faulted\"]->save();\r\n        $availabilityInstance->attributes[\"faulted\"]->insertTimeSeries([1], [$current_time_with_millisecond]);\r\n    }\r\n    elseif ($machineState > 6 && $machineState <= 8) {\r\n        echo \"- The machine should be starved\" . PHP_EOL;\r\n        $availabilityInstance->attributes[\"starved\"]->bool_value = 1;\r\n        $availabilityInstance->attributes[\"starved\"]->save();\r\n        $availabilityInstance->attributes[\"starved\"]->insertTimeSeries([1], [$current_time_with_millisecond]);\r\n    }\r\n    elseif ($machineState > 9 && $machineState <= 11) {\r\n        echo \"- The machine should be blocked\" . PHP_EOL;\r\n        $availabilityInstance->attributes[\"blocked\"]->bool_value = 1;\r\n        $availabilityInstance->attributes[\"blocked\"]->save();\r\n        $availabilityInstance->attributes[\"blocked\"]->insertTimeSeries([1], [$current_time_with_millisecond]);\r\n    }\r\n    else {\r\n        echo \"- The machine should be running normally\" . PHP_EOL;\r\n        $availabilityInstance->attributes[\"faulted\"]->bool_value = 0;\r\n        $availabilityInstance->attributes[\"faulted\"]->save();\r\n        $availabilityInstance->attributes[\"faulted\"]->insertTimeSeries([0], [$current_time_with_millisecond]);\r\n        $availabilityInstance->attributes[\"starved\"]->bool_value = 0;\r\n        $availabilityInstance->attributes[\"starved\"]->save();\r\n        $availabilityInstance->attributes[\"starved\"]->insertTimeSeries([0], [$current_time_with_millisecond]);\r\n        $availabilityInstance->attributes[\"blocked\"]->bool_value = 0;\r\n        $availabilityInstance->attributes[\"blocked\"]->save();\r\n        $availabilityInstance->attributes[\"blocked\"]->insertTimeSeries([0], [$current_time_with_millisecond]);\r\n    }\r\n}\r\n\r\nfunction simulatePerformance($performanceInstance, $availableNow, $current_time_with_millisecond) {\r\n    $performanceInstance->getAttributes();\r\n    $attribs = $performanceInstance->attributes;\r\n    $runTimeToday = $attribs[\"daily_operating_time\"]->current_value;\r\n    if (!$runTimeToday)\r\n        $runTimeToday = 0;\r\n    echo \"- Run Time Today is: \" . $runTimeToday . PHP_EOL;\r\n\r\n    $idealCycleTime = $attribs[\"ideal_cycle_time\"]->current_value;\r\n\r\n    if ($availableNow) {\r\n        echo \"- Incrementing good cycles\" . PHP_EOL;\r\n        $performanceInstance->attributes[\"daily_actual_cycles\"]->int_value = $performanceInstance->attributes[\"daily_actual_cycles\"]->current_value + 1;\r\n        $performanceInstance->attributes[\"daily_actual_cycles\"]->save();\r\n        $performanceInstance->attributes[\"daily_actual_cycles\"]->insertTimeSeries([$performanceInstance->attributes[\"daily_actual_cycles\"]->current_value + 1], [$current_time_with_millisecond]);\r\n    } else {\r\n        echo \"- NOT Incrementing Good Cycles\" . PHP_EOL;\r\n    }\r\n}\r\n\r\nfunction minutesBetweenTicks($newTicks, $oldTicks) {\r\n    $newTime = date('c',$newTicks);\r\n    $oldTime = date('c',$oldTicks);\r\n    return (abs($newTicks - $oldTicks) / 60); \r\n}",
                    "document": {
                        "template": false
                    },
                    "importance": null,
                    "description": "This script works on all Equipment instances that implement (contain) the OEE interface definitions -- IF scheduled. Set the schedule it to run every minute, and it will simulate OEE related data changes on all instances.",
                    "edit_status": 1,
                    "output_type": "headless",
                    "script_type": "php",
                    "display_name": "OEE Simulator",
                    "relative_name": "oee_simulator",
                    "initial_inputs": {
                        "start_timestamp": "2024-04-26T15:32:20.000+00:00",
                        "interval_seconds": "60"
                    },
                    "cron_expression": "0 * * * * ? *",
                    "exec_on_derived": false,
                    "updated_timestamp": "2024-05-14T13:39:44.524161+00:00",
                    "max_acceptable_run_secs": 58,
                    "use_outputs_from_last_run": true
                },
                {
                    "run": false,
                    "owner": "cesmiihq",
                    "script": "<?php\r\n /* Update Summary:\r\nThis script runs every minute against Equipment instances that implement the OEE Summary Interface, \r\nto compute the summary OEE state of the Equipment.\r\n*/\r\nuse \\TiqUtilities\\Model\\Node;\r\nuse \\TiqUtilities\\Model\\Type;\r\nuse \\TiqUtilities\\Model\\Equipment;\r\nuse \\TiqUtilities\\Model\\Attribute;\r\nuse \\TiqUtilities\\Model\\Script;\r\nuse Joomla\\CMS\\Response\\JsonResponse; // Used for returning data to the client.\r\nrequire_once 'thinkiq_context.php';\r\nrequire_once 'load_cms.php';\r\n$context = new Context();\r\n\r\n//Find our types\r\n$availabilityType = new Type('oee_interface.oee_availability_interface');\r\n$qualityType = new Type('oee_interface.oee_quality_interface');\r\n$performanceType = new Type('oee_interface.oee_performance_interface');\r\n$summaryType = new Type('oee_interface.oee_summary_interface');\r\n\r\n//Make time\r\n$current_time_with_millisecond = DateTime::createFromFormat('U.u', microtime(true))->format(DateTimeInterface::RFC3339_EXTENDED);\r\necho \"Using Time: \" . $current_time_with_millisecond . PHP_EOL;\r\n\r\n//Find parent and get children\r\n$parent = new Node($context->std_inputs->node_id);\r\n$parent->getChildren();\r\n$grandparent = Node::getInstance($parent->part_of_id);\r\necho \"Part of: \" . $grandparent->relative_name . PHP_EOL;\r\n$childNodes = $parent->children;\r\n\r\n//If there are no children, get the grandparent's children\r\nif (count($childNodes) <= 0) {\r\n    $grandparent->getChildren();\r\n    $childNodes = $grandparent->children;\r\n}\r\n\r\nif (isset($parent)) {\r\n    if ($parent->type_id == $summaryType->id) {\r\n        $parent->getAttributes();\r\n        if (isset($parent->attributes[\"oee_percent\"]->current_value))\r\n            $oeeValue = $parent->attributes[\"oee_percent\"]->current_value;\r\n        else\r\n            echo \"Warning: could not find today's OEE value!\" . PHP_EOL;\r\n    } else {\r\n        die (\"Parent object was not an OEE Summary Instance, this script cannot run!\");\r\n    }\r\n} else {\r\n    die (\"Error: could not find OEE Summary Instance, nothing to update!\");\r\n}\r\n\r\n$found = 0;\r\nforeach($childNodes as $aChild){\r\n    if ($aChild->type_id == $availabilityType->id) {\r\n        echo \"Found the availablity child!\" . PHP_EOL;\r\n        $availabilityInstance = $aChild;\r\n        $found++;\r\n    }\r\n    if ($aChild->type_id == $qualityType->id) {\r\n        echo \"Found the quality child!\" . PHP_EOL;\r\n        $qualityInstance = $aChild;\r\n        $found++;\r\n    }\r\n    if ($aChild->type_id == $performanceType->id) {\r\n        echo \"Found the performance child!\" . PHP_EOL;\r\n        $performanceInstance = $aChild;\r\n        $found++;\r\n    }\r\n}\r\n\r\n$availabilityValue = 100;\r\nif (isset($availabilityInstance)) {\r\n    $availabilityInstance->getAttributes();\r\n    if (isset($availabilityInstance->attributes[\"daily_availability\"]->current_value)) {\r\n        $availabilityValue = $availabilityInstance->attributes[\"daily_availability\"]->current_value;\r\n    }\r\n    else {\r\n        echo \"Warning: could not find today's availability value!\" . PHP_EOL;\r\n    }   \r\n} else {\r\n    echo \"Warning: could not find availability instance!\" . PHP_EOL;\r\n}\r\n\r\n$performanceValue = 100;\r\nif (isset ($performanceInstance)) {\r\n    $performanceInstance->getAttributes();\r\n    if (isset($performanceInstance->attributes[\"daily_performance\"]->current_value)) {\r\n        $performanceValue = $performanceInstance->attributes[\"daily_performance\"]->current_value;\r\n    } else {\r\n        echo \"Warning: could not find today's performance value!\" . PHP_EOL;\r\n    }   \r\n\r\n} else {\r\n    echo \"Warning: could not find performance instance!\" . PHP_EOL;\r\n}\r\n\r\n$qualityValue = 100;\r\nif (isset ($qualityInstance)) {\r\n    $qualityInstance->getAttributes();\r\n    if (isset($qualityInstance->attributes[\"daily_quality\"]->current_value)) {\r\n        $qualityValue = $qualityInstance->attributes[\"daily_quality\"]->current_value;\r\n    } else {\r\n        echo \"Warning: could not find today's quality value!\" . PHP_EOL;\r\n    }\r\n} else {\r\n    echo \"Warning: could not find quality instance!\" . PHP_EOL;\r\n}\r\n\r\necho \"Availability Current Value: \" . $availabilityValue . PHP_EOL;\r\necho \"Performance Current Value: \" . $performanceValue . PHP_EOL;\r\necho \"Quality Current Value: \" . $qualityValue . PHP_EOL;\r\necho \"OEE Current Value: \" . $oeeValue . PHP_EOL;",
                    "document": {
                        "template": false
                    },
                    "importance": null,
                    "description": "Run this manually as a unit test of the OEE Summary Value",
                    "edit_status": 1,
                    "output_type": "browser",
                    "script_type": "php",
                    "display_name": "Test Current Value",
                    "relative_name": "test_current_value",
                    "initial_inputs": {
                        "start_timestamp": "2024-05-09T13:52:01.000+00:00",
                        "interval_seconds": "60"
                    },
                    "cron_expression": "0 * * * * ? *",
                    "exec_on_derived": false,
                    "updated_timestamp": "2024-05-14T12:51:01.352178+00:00",
                    "max_acceptable_run_secs": 0,
                    "use_outputs_from_last_run": true
                }
            ],
            "document": null,
            "attributes": [
                {
                    "icon": null,
                    "document": null,
                    "data_type": "float",
                    "is_hidden": false,
                    "max_value": 100,
                    "min_value": 0,
                    "expression": null,
                    "importance": 1,
                    "description": "The calculated Daily OEE Value",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Daily OEE Percent",
                    "default_value": null,
                    "relative_name": "oee_percent",
                    "decimal_places": 2,
                    "source_category": "dynamic",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-04-28T21:29:42.197951+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "linear",
                    "unlink_relative_name": true,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": [
                        "thinkiq_base_library",
                        "percent"
                    ]
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "float",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 10,
                    "description": "Configure this value to configure a Timezone Offset for determining when a day starts. Defaults to UTC-0.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Timezone Offset",
                    "default_value": "0",
                    "relative_name": "tzoffset",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-14T12:51:30.754952+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "string",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 10,
                    "description": "Configure this value to set the time to restart accumulators and calculations. Use HH:MM with 24-hour time. Defaults to midnight.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Day Start",
                    "default_value": "00:01",
                    "relative_name": "daystart",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-14T12:51:44.343693+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                },
                {
                    "icon": null,
                    "document": null,
                    "data_type": "bool",
                    "is_hidden": false,
                    "max_value": null,
                    "min_value": null,
                    "expression": null,
                    "importance": 10,
                    "description": "If set to True at an instance, and the Simulation script is scheduled, simulated values will be inserted every minute for all OEE Interfaces.",
                    "edit_status": 1,
                    "is_required": false,
                    "display_name": "Simulator Enabled",
                    "default_value": "false",
                    "relative_name": "simulator_enabled",
                    "decimal_places": 2,
                    "source_category": "config",
                    "attribute_limits": [],
                    "updated_timestamp": "2024-05-14T13:26:52.084795+00:00",
                    "attribute_type_fqn": null,
                    "associated_event_ids": null,
                    "enumeration_type_fqn": null,
                    "interpolation_method": "previous",
                    "unlink_relative_name": false,
                    "object_history_type_id": null,
                    "object_history_type_fqn": null,
                    "default_enumeration_values": null,
                    "default_measurement_unit_fqn": null
                }
            ],
            "importance": null,
            "description": null,
            "edit_status": 1,
            "display_name": "OEESummaryInterfaceType",
            "opcua_methods": [],
            "relative_name": "oee_summary_interface",
            "classification": "equipment",
            "child_equipment": [],
            "sub_type_of_fqn": [
                "thinkiq_base_library",
                "equipment"
            ],
            "access_group_ids": null,
            "updated_timestamp": "2024-04-28T18:25:57.039999+00:00",
            "unlink_relative_name": true
        },
        {
            "fqn": [
                "thinkiq_base_library",
                "equipment"
            ],
            "scripts": [],
            "document": null,
            "attributes": [],
            "importance": 10,
            "description": "Base type of equipment types.",
            "edit_status": 1,
            "display_name": "Equipment",
            "opcua_methods": [],
            "relative_name": "equipment",
            "classification": "equipment",
            "child_equipment": [],
            "sub_type_of_fqn": null,
            "access_group_ids": null,
            "updated_timestamp": "2022-08-02T00:48:48.107651+00:00",
            "unlink_relative_name": false
        }
    ],
    "objects": [],
    "libraries": [
        {
            "fqn": [
                "local_library"
            ],
            "locked": false,
            "models": null,
            "aliases": null,
            "version": "1.0.0",
            "document": null,
            "licensing": null,
            "extensions": null,
            "importance": 10,
            "description": "The library storing type system locally",
            "edit_status": 1,
            "server_uris": null,
            "display_name": "Local Library",
            "relative_name": "local_library",
            "namespace_uris": null,
            "updated_timestamp": "2021-02-25T00:01:15.797588+00:00",
            "unlink_relative_name": false
        },
        {
            "fqn": [
                "oee_interface"
            ],
            "locked": false,
            "models": null,
            "aliases": null,
            "version": "1.0.0",
            "document": null,
            "licensing": null,
            "extensions": null,
            "importance": null,
            "description": "<p>A Library of interface Type definitions and scripts to calculate OEE, and its components, on equipment.</p>",
            "edit_status": 1,
            "server_uris": null,
            "display_name": "OEE Interface",
            "relative_name": "oee_interface",
            "namespace_uris": null,
            "updated_timestamp": "2024-04-18T18:55:49.306465+00:00",
            "unlink_relative_name": false
        },
        {
            "fqn": [
                "thinkiq_base_library"
            ],
            "locked": true,
            "models": null,
            "aliases": null,
            "version": "1.7.0",
            "document": null,
            "licensing": "The ThinkIQ Base Library is copyright protected.",
            "extensions": null,
            "importance": 10,
            "description": "ThinkIQ Base Library",
            "edit_status": 1,
            "server_uris": null,
            "display_name": "ThinkIQ Base Library",
            "relative_name": "thinkiq_base_library",
            "namespace_uris": null,
            "updated_timestamp": "2023-11-29T04:22:24.541253+00:00",
            "unlink_relative_name": false
        }
    ],
    "quantities": [
        {
            "fqn": [
                "thinkiq_base_library",
                "fraction_quantity"
            ],
            "document": null,
            "importance": 10,
            "description": "The ratio between two dimensionless numbers",
            "edit_status": 1,
            "display_name": "Fraction quantity",
            "relative_name": "fraction_quantity",
            "quantity_symbol": "Fraction",
            "updated_timestamp": "2022-09-14T05:16:01.824244+00:00",
            "unlink_relative_name": false
        },
        {
            "fqn": [
                "thinkiq_base_library",
                "time_quantity"
            ],
            "document": null,
            "importance": 10,
            "description": "The indefinite continued progress of existence and events that occur in an apparently irreversible succession from the past, through the present, into the future",
            "edit_status": 1,
            "display_name": "Time and duration quantity",
            "relative_name": "time_quantity",
            "quantity_symbol": "t",
            "updated_timestamp": "2022-09-14T05:16:01.824244+00:00",
            "unlink_relative_name": false
        }
    ],
    "relationships": [],
    "opcua_variables": [],
    "opcua_data_types": [],
    "script_templates": [
        {
            "fqn": [
                "oee_interface",
                "oee_common_functions"
            ],
            "run": false,
            "owner": "cesmiihq",
            "script": "<?php\r\nuse \\TiqUtilities\\Model\\Node;\r\nuse \\TiqUtilities\\Model\\Type;\r\nrequire_once 'thinkiq_context.php';\r\n//global $context;\r\n//global $logger; // shorthand to keep this script clearer \r\n//$logger->info(\"Loaded OEE Common Class script\");\r\n\r\nclass OEECommon {\r\n    public $context;\r\n    public $logger;\r\n\r\n    function __construct($caller_context, $caller_logger) {\r\n        $this->context = $caller_context;\r\n        $this->logger = $caller_logger;\r\n        $this->logger->info(\"Constructed OEE Common Class script\");\r\n    }\r\n\r\n    function findRelatedNodeOfType($parent, $nodeType) {\r\n        //Find config from grandparent's OEE Summary child (if present)\r\n        $findType = new Type($nodeType);\r\n        $grandparent = Node::getInstance($parent->part_of_id);\r\n        $this->logger->info(\"Finding node of type \" . $nodeType . \" for PartOf: \" . $grandparent->relative_name);\r\n        \r\n        //See if the grandparent node is the type\r\n        if ($grandparent->type_id == $findType->id) {\r\n            $this->logger->info(\"Found \" . $nodeType . \" in interface peer.\");\r\n            return $grandparent;\r\n        }\r\n\r\n        //Otherwise, look at the grandparent's children\r\n        $grandparent->getChildren();\r\n        $childNodes = $grandparent->children;\r\n        foreach($childNodes as $aChild){\r\n            if ($aChild->type_id == $findType->id) {\r\n                $this->logger->info(\"Found \" . $nodeType . \" in interface parent.\");\r\n                return $aChild;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getConfig($parent) {\r\n        $this->logger->info(\"Getting OEE Config for PartOf: \" . $parent->relative_name);\r\n        $configNode = $this->findRelatedNodeOfType($parent, 'oee_interface.oee_summary_interface');\r\n        if (isset($configNode)) {\r\n            $configNode->getAttributes();\r\n            $config = $configNode->attributes; \r\n            return array(\"tzoffset\"=>$config[\"tzoffset\"]->float_value, \"daystart\"=>$config[\"daystart\"]->string_value);\r\n        } else {\r\n            //Finally use hard-coded (demo) config\r\n            if ($tzoffset == false) {\r\n                $tzoffset = -5;\r\n                $this->logger->info(\"Using hardcoded timezone config\");\r\n            }\r\n            if ($daystart == false) {\r\n                $daystart = \"00:00\";\r\n                $this->logger->info(\"Using hardcoded day start config\");\r\n            }\r\n            return array(\"tzoffset\"=>$tzoffset, \"daystart\"=>$daystart);\r\n        }\r\n    }\r\n\r\n    function getOffsetTime($config, $originalTimeString = \"now\") {\r\n        //Figure out working time\r\n        $tzoffset = 0;\r\n        if (isset($config[\"tzoffset\"]))\r\n            $tzoffset = $config[\"tzoffset\"];\r\n        $this->logger->info(\"TZOffset: \" . $tzoffset);\r\n        if (date('I'))  //Determine if its Daylight Savings Time (TODO: this needs to be configurable)\r\n            $tzoffset = $tzoffset - 1;\r\n        $this->logger->info(\"DST: \" . date('I'));\r\n        $original = new DateTime($originalTimeString, new DateTimeZone('UTC'));\r\n        $timezoneName = timezone_name_from_abbr(\"\", ($tzoffset*3600), false);\r\n        $offsetTime = $original->setTimezone(new DateTimezone($timezoneName));\r\n        return $offsetTime;\r\n    }\r\n\r\n    //TODO: This is garbage and doesn't work\r\n    /*\r\n    function calcAvailProdMinutesToday($config, $offsetTime, $minutesToday) {\r\n        $dayStartHM = $this->getDayStartHM($config, $offsetTime);\r\n\r\n        //Calculate actual usable time today\r\n        $daystartString = $offsetTime->format( 'Y-m-d' );\r\n        $daystartString = $daystartString . \" \" . $dayStartHM . \":00\";\r\n        //If this time is in the future, subtract a day\r\n        $daystart = DateTime::createFromFormat('Y-m-d H:i:s', $daystartString, $offsetTime->getTimezone());\r\n        echo \"dayStart: \" . $daystart->format('Y-m-d H:i:s e') . \" - \" . $daystart->getTimestamp() . PHP_EOL;\r\n        echo \"offsetTime: \" . $offsetTime->format('Y-m-d H:i:s e') . \" - \" . $offsetTime->getTimestamp() . PHP_EOL;\r\n        $checkMin = $this->minutesSinceTime($offsetTime, $daystart, 0);\r\n        echo \"Working min today: \" . $minutesToday . PHP_EOL;\r\n        echo \"Calculated min since day start: \" . $checkMin . PHP_EOL;\r\n        if ($checkMin > $minutesToday) {\r\n            echo \"Start time was yesterday!\" . PHP_EOL;\r\n            $daystart->modify(\"-1 day\");\r\n        } else {\r\n            echo \"Start time was today\" . PHP_EOL;\r\n        }\r\n        echo \"Today started at: \" . $daystart->format('Y-m-d H:i:s') . PHP_EOL;\r\n        $availableProductionMinutes = $this->minutesSinceTime($daystart, $offsetTime, $config[\"tzoffset\"]) + 1;\r\n        return $availableProductionMinutes;\r\n    }\r\n\r\n    function getDayStartHM($config, $offsetTime) {\r\n        //Figure out if its time to reset counters\r\n        if (!isset($config[\"daystart\"]))\r\n            $config[\"daystart\"] = \"00:01\";\r\n        $currH = (int)$offsetTime->format( 'H' );\r\n        $currM = (int)$offsetTime->format ( 'i' );\r\n        $daystartH = 0;\r\n        $daystartM = 0;\r\n        $daystartParts = explode(\":\", $config[\"daystart\"]);\r\n        if (count($daystartParts) > 1) {\r\n            $daystartH = (int)$daystartParts[0];\r\n            $daystartM = (int)$daystartParts[1];\r\n        }\r\n        $daystartHM = $this->padZero($daystartH) . \":\" . $this->padZero($daystartM);\r\n        $this->logger->info(\"Day Start: \" .  $daystartHM);\r\n        return $daystartHM;\r\n    }\r\n    */\r\n\r\n    function padZero($value) {\r\n        if ((int)$value <=9) {\r\n            return \"0\".$value;\r\n        } else {\r\n            return $value;\r\n        }\r\n    }\r\n\r\n    function minutesSinceTime($dtCurrent, $dtStart, $offset) {  \r\n        $to_time = strtotime($dtCurrent->format( 'Y-m-d H:i:s' ));\r\n        $from_time = strtotime($dtStart->format( 'Y-m-d H:i:s' ));\r\n        return round(abs($to_time - $from_time) / 60,0);\r\n    }\r\n}\r\n?>",
            "document": {
                "template": false
            },
            "importance": null,
            "description": null,
            "edit_status": 1,
            "output_type": "class",
            "script_type": "php",
            "display_name": "OEE Common Functions",
            "relative_name": "oee_common_functions",
            "initial_inputs": {
                "start_timestamp": "2024-04-29T17:41:29.000+00:00",
                "interval_seconds": "60"
            },
            "cron_expression": "0 * * * * ? *",
            "exec_on_derived": false,
            "updated_timestamp": "2024-04-29T22:36:38.391074+00:00",
            "max_acceptable_run_secs": 0,
            "use_outputs_from_last_run": false
        }
    ],
    "enumeration_types": [],
    "measurement_units": [
        {
            "fqn": [
                "thinkiq_base_library",
                "minute"
            ],
            "symbol": "min",
            "document": null,
            "is_hidden": false,
            "importance": 10,
            "unece_code": "MIN",
            "unece_name": "minute [unit of time]",
            "description": null,
            "edit_status": 1,
            "display_name": "minute",
            "quantity_fqn": [
                "thinkiq_base_library",
                "time_quantity"
            ],
            "opcua_unit_id": 5065038,
            "relative_name": "minute",
            "conversion_offset": 0,
            "updated_timestamp": "2022-09-14T05:16:01.824244+00:00",
            "unlink_relative_name": false,
            "conversion_multiplier": 60
        },
        {
            "fqn": [
                "thinkiq_base_library",
                "percent"
            ],
            "symbol": "%",
            "document": null,
            "is_hidden": false,
            "importance": 10,
            "unece_code": "P1",
            "unece_name": "percent",
            "description": null,
            "edit_status": 1,
            "display_name": "percent",
            "quantity_fqn": [
                "thinkiq_base_library",
                "fraction_quantity"
            ],
            "opcua_unit_id": 20529,
            "relative_name": "percent",
            "conversion_offset": 0,
            "updated_timestamp": "2022-09-14T05:16:01.824244+00:00",
            "unlink_relative_name": false,
            "conversion_multiplier": 1
        }
    ],
    "relationship_types": [],
    "opcua_variable_types": [],
    "opcua_reference_types": [],
    "md5_checksum": "9355f941236552268e484d2931d8b2c2"
}